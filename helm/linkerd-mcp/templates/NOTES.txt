Thank you for installing {{ .Chart.Name }}!

Your release is named {{ .Release.Name }}.

To learn more about the release, try:

  $ helm status {{ .Release.Name }} -n {{ .Release.Namespace }}
  $ helm get all {{ .Release.Name }} -n {{ .Release.Namespace }}

{{ if .Values.service.enabled -}}
The Linkerd MCP server has been deployed and is accessible via:

  Service: {{ include "linkerd-mcp.fullname" . }}
  Namespace: {{ .Release.Namespace }}
  Type: {{ .Values.service.type }}
  Port: {{ .Values.service.port }}

{{- if eq .Values.service.type "ClusterIP" }}

To access the service from within the cluster:

  export POD_NAME=$(kubectl get pods -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "linkerd-mcp.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  kubectl port-forward -n {{ .Release.Namespace }} $POD_NAME 8080:{{ .Values.service.port }}

{{- end }}
{{- end }}

Security Features Enabled:
- ✓ Running as non-root user (UID: {{ .Values.podSecurityContext.runAsUser }})
- ✓ Read-only root filesystem
- ✓ All capabilities dropped
- ✓ No privilege escalation
- ✓ Seccomp profile: RuntimeDefault
{{- if .Values.networkPolicy.enabled }}
- ✓ Network policies enabled
{{- end }}
{{- if .Values.podDisruptionBudget.enabled }}
- ✓ Pod disruption budget configured
{{- end }}
{{- if .Values.autoscaling.enabled }}
- ✓ Horizontal Pod Autoscaling enabled
{{- end }}

Resource Configuration:
  CPU Request: {{ .Values.resources.requests.cpu }}
  CPU Limit: {{ .Values.resources.limits.cpu }}
  Memory Request: {{ .Values.resources.requests.memory }}
  Memory Limit: {{ .Values.resources.limits.memory }}

RBAC Permissions:
{{- if .Values.rbac.create }}
  ServiceAccount: {{ include "linkerd-mcp.serviceAccountName" . }}
  {{- if .Values.rbac.clusterRole }}
  ClusterRole: {{ include "linkerd-mcp.fullname" . }}
  ClusterRoleBinding: {{ include "linkerd-mcp.fullname" . }}
  {{- end }}
{{- else }}
  Using existing ServiceAccount
{{- end }}

The MCP server provides the following tools:
  - check_mesh_health: Check Linkerd control plane health
  - analyze_connectivity: Analyze service-to-service connectivity policies
  - list_meshed_services: List all services in the mesh
  - get_allowed_targets: Find all services a source can communicate with
  - get_allowed_sources: Find all sources that can communicate with a target

For more information, visit: https://github.com/christianhuening/linkerd-mcp

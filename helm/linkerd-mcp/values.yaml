# Default values for linkerd-mcp
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: linkerd-mcp
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations:
  # Enable Linkerd proxy injection
  linkerd.io/inject: "enabled"

podLabels: {}

podSecurityContext:
  # Modern Kubernetes security: run as non-root
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532
  fsGroupChangePolicy: "OnRootMismatch"
  # Use seccomp profile
  seccompProfile:
    type: RuntimeDefault

securityContext:
  # Capabilities required for the container
  capabilities:
    drop:
    - ALL
  # Read-only root filesystem
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  # Use seccomp profile at container level
  seccompProfile:
    type: RuntimeDefault

service:
  enabled: true
  type: ClusterIP
  port: 8080
  targetPort: 8080
  protocol: TCP
  annotations: {}
  labels: {}

# Resource requests and limits
resources:
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Liveness and readiness probes
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

# Startup probe for slow-starting containers
startupProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 0
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 30

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  # Temporary directory for writable filesystem (since root is read-only)
  - name: tmp
    emptyDir: {}
  - name: cache
    emptyDir: {}

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: cache
    mountPath: /root/.cache

nodeSelector: {}

tolerations: []

affinity: {}

# Topology spread constraints for better pod distribution
topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #     matchLabels:
  #       app.kubernetes.io/name: linkerd-mcp

# Priority class for pod scheduling
priorityClassName: ""

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# RBAC configuration
rbac:
  create: true
  # Use ClusterRole for cluster-wide access
  clusterRole: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "namespaces"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["policy.linkerd.io"]
      resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes", "meshtlsauthentications", "networkauthentications"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets"]
      verbs: ["get", "list"]

# Environment variables
env:
  - name: LINKERD_NAMESPACE
    value: "linkerd"

# Extra environment variables from ConfigMaps or Secrets
envFrom: []
  # - configMapRef:
  #     name: linkerd-mcp-config
  # - secretRef:
  #     name: linkerd-mcp-secrets

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Revision history limit
revisionHistoryLimit: 10

# Network policy
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress:
    # Allow DNS
    - to:
      - namespaceSelector:
          matchLabels:
            kubernetes.io/metadata.name: kube-system
      ports:
      - protocol: UDP
        port: 53
    # Allow Kubernetes API
    - to:
      - namespaceSelector: {}
      ports:
      - protocol: TCP
        port: 443

# Service monitor for Prometheus Operator
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}

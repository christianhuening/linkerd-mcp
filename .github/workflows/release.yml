name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.3.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ### Binary Installation
            Download the appropriate binary for your platform from the assets below.

            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
            ```

            ### Helm
            ```bash
            helm install linkerd-mcp ./helm/linkerd-mcp --version ${{ steps.get_version.outputs.version }}
            ```

            ## Verification
            All binaries are built and tested in CI. See the Actions tab for details.
          draft: false
          prerelease: false

  build-release-binaries:
    name: Build Release Binaries
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          OUTPUT_NAME=linkerd-mcp-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi

          go build -v \
            -ldflags="-s -w -X main.version=${VERSION} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o "${OUTPUT_NAME}" .

          # Create tarball (except for Windows)
          if [ "${{ matrix.goos }}" != "windows" ]; then
            tar -czf "${OUTPUT_NAME}.tar.gz" "${OUTPUT_NAME}"
            sha256sum "${OUTPUT_NAME}.tar.gz" > "${OUTPUT_NAME}.tar.gz.sha256"
            echo "ASSET=${OUTPUT_NAME}.tar.gz" >> $GITHUB_ENV
            echo "CHECKSUM=${OUTPUT_NAME}.tar.gz.sha256" >> $GITHUB_ENV
          else
            zip "${OUTPUT_NAME}.zip" "${OUTPUT_NAME}"
            sha256sum "${OUTPUT_NAME}.zip" > "${OUTPUT_NAME}.zip.sha256"
            echo "ASSET=${OUTPUT_NAME}.zip" >> $GITHUB_ENV
            echo "CHECKSUM=${OUTPUT_NAME}.zip.sha256" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.CHECKSUM }}
          asset_name: ${{ env.CHECKSUM }}
          asset_content_type: text/plain

  publish-helm-chart:
    name: Publish Helm Chart
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Update Chart version
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          sed -i "s/version: .*/version: ${VERSION}/" helm/linkerd-mcp/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: \"${VERSION}\"/" helm/linkerd-mcp/Chart.yaml

      - name: Package Helm chart
        run: |
          helm package helm/linkerd-mcp

      - name: Upload Helm chart
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./linkerd-mcp-${{ needs.create-release.outputs.version }}.tgz
          asset_name: linkerd-mcp-helm-${{ needs.create-release.outputs.version }}.tgz
          asset_content_type: application/gzip
